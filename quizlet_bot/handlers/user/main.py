from emoji import emojize
from io import BytesIO
from random import choice
from aiogram import Dispatcher
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.dispatcher import FSMContext

from states import FSM
# from misc.google_drive_connection import GD_con

from keyboards import inline, reply

from texts.all_texts import Texts
from database.methods import insert, get, delete


def random_emoji_after_create():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏

    Returns:
        str: –°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —ç–º–æ–¥–∑–∏.
    """
    try:
        animal_lst = [
            'üëæ', 'üí´', 'üëÆ‚Äç‚ôÇÔ∏è', 'ü§¶‚Äç‚ôÄÔ∏è', 'üò∂‚Äçüå´Ô∏è', 'üêà‚Äç‚¨õ', 'ü§¶', 'üë®‚Äçüíª', 'üë©‚Äçüíª', 'üëÆ‚Äç‚ôÄÔ∏è',
        ]
        return choice(animal_lst)
    except Exception as e:
        print(f"An error occurred in def random_emoji_after_create: {str(e)}")


def random_next_emoji():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞.

    Returns:
        str: –°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —ç–º–æ–¥–∑–∏.
    """
    try:
        animal_lst = [
            'ü¶â', 'üêç', 'üê¶Ô∏è', 'ü¶≠', 'üê§', 'üêî', 'üåö', 'üåù', 'üë†', 'üß®'
        ]
        return choice(animal_lst)
    except Exception as e:
        print(f"An error occurred in def random_next_emoji: {str(e)}")


def random_item(data):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
    —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    Args:
        data (list or iterable): –°–ø–∏—Å–æ–∫ –∏–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç.

    Returns:
        Any: –°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
    """
    try:
        return choice(data)
    except Exception as e:
        print(f"An error occurred in def random_item: {str(e)}")


def folder_check(photos_folder_id, folder_title):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–∞ Google –î–∏—Å–∫–µ.

    Args:
        photos_folder_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞–ø–∫–∏ –Ω–∞ Google –î–∏—Å–∫–µ = –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        folder_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.

    Returns:
        bool: True, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–∞ Google –î–∏—Å–∫–µ
        file_list = GD_con.drive.ListFile(
            {
                'q': f"'{photos_folder_id}' in parents and trashed=false"
            }
        ).GetList()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–∫–µ
        for file in file_list:
            if file['title'] == folder_title:
                return True  # –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return False  # –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    except Exception as e:
        print(f"An error occurred in def folder_check: {str(e)}")


def get_folder_id(folder_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞–ø–∫–∏ –Ω–∞ Google –î–∏—Å–∫–µ –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é.

    Args:
        folder_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏.

    Returns:
        str or None: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–∞ Google –î–∏—Å–∫–µ
        file_list = GD_con.drive.ListFile(
            {
                'q': f"'{GD_con.main_folder_id}' in parents and trashed=false"
            }
        ).GetList()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–∫–µ
        for file in file_list:
            if file['title'] == folder_name and file['mimeType'] == 'application/vnd.google-apps.folder':
                return file['id']
    except Exception as e:
        print(f"An error occurred in def get_folder_id: {str(e)}")


def filter_data(data):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.

    Args:
        data (dict): –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

    Returns:
        tuple: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        item = random_item(data=data['items_not_used'])
        data['items_not_used'] = [i for i in data['items_not_used'] if i != item]
        data['items_were_used'].append(item)
        data['item_in_progres'] = item
        return item, data
    except Exception as e:
        print(f"An error occurred in def filter_data: {str(e)}")


async def help_me_someone(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–º –∏–∑ —Å—Ç–µ–π—Ç–æ–≤ –∏ –Ω–µ –≤–∏–¥–∏—Ç
    –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–µ—Ä–µ–¥ –≥–ª–∞–∑–∞–º–∏. –í—ã–≤–µ–¥–µ—Ç –º–µ–Ω—é.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.commands,
            parse_mode='HTML',
            reply_markup=reply.get_kb_menu()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ main_menu
        await FSM.main_menu.set()
    except Exception as e:
        print(f"An error occurred in def help_me_someone: {str(e)}")


async def back_to_menu(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /back_to_menu.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    try:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è
        await state.finish()
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.commands,
            parse_mode='HTML',
            reply_markup=reply.get_kb_menu()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ main_menu
        await FSM.main_menu.set()
    except Exception as e:
        print(f"An error occurred in def back_to_menu: {str(e)}")


async def start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞ /menu

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É /menu
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.start,
            parse_mode='HTML',
            reply_markup=reply.get_kb_start()
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Google –î–∏—Å–∫–µ
        if not folder_check(photos_folder_id=GD_con.main_folder_id, folder_title=message.from_user.username):
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            new_folder = GD_con.drive.CreateFile(
                {
                    'title': message.from_user.username,
                    'parents': [{'id': GD_con.main_folder_id}],
                    'mimeType': 'application/vnd.google-apps.folder'
                }
            )
            new_folder.Upload()
            print('A new user has been created: {}'.format(message.from_user.username))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ main_menu
        await FSM.main_menu.set()
    except Exception as e:
        print(f"An error occurred in def start: {str(e)}")


async def menu(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.commands,
            reply_markup=reply.get_kb_menu(),
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"An error occurred in def menu: {str(e)}")

async def create_card(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏. –ü—Ä–æ—Å–∏—Ç –≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å–ª–æ–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            text=Texts.set_the_word,
            reply_markup=reply.get_kb_back_to_menu()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ get_word
        await FSM.get_word.set()
    except Exception as e:
        print(f"An error occurred in def create_card: {str(e)}")


async def get_word(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–æ–≤–∞ –∏ –ø—Ä–æ—Å—å–±—ã –≤–≤–µ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ MemoryStorage
        async with state.proxy() as data:
            data['word'] = message.text

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ get_desc
        await message.answer(
            text=Texts.set_the_decs
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ get_desc
        await FSM.get_desc.set()
    except Exception as e:
        print(f"An error occurred in def get_word: {str(e)}")


async def get_desc(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ (–∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ MemoryStorage
        async with state.proxy() as data:
            data['desc'] = message.text

        # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ decision_to_upload_photo
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.ask_to_set_the_photo,
            reply_markup=inline.get_inl_kb_for_decision_to_upload_photo()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ decision_to_upload_photo
        await FSM.decision_to_upload_photo.set()
    except Exception as e:
        print(f"An error occurred in def get_desc: {str(e)}")


async def get_photo(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ç–æ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–≥–æ –Ω–∞ Google –î–∏—Å–∫.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ.
        state (FSMContext): –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo_file_id = message.photo[-1].file_id
        photo_info = await message.bot.get_file(
            file_id=photo_file_id
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Google –î–∏—Å–∫–µ
        user_folder_id = get_folder_id(
            folder_name=message.from_user.username
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ Google –î–∏—Å–∫
        photo_content = await message.bot.download_file(
            file_path=photo_info.file_path
        )
        gdrive_file = GD_con.drive.CreateFile(
            {
                'title': photo_file_id,
                'parents': [{'id': user_folder_id}]
            }
        )
        gdrive_file.content = BytesIO(
            photo_content.getvalue()
        )
        gdrive_file.Upload()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –≤ MemoryStorage
        async with state.proxy() as data:
            data['url'] = gdrive_file['alternateLink']
            print(f"File uploaded to Google Drive. URL: {data['url']}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å —ç–º–æ–¥–∑–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=emojize(string=random_emoji_after_create())
        )
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.done,
            parse_mode='HTML',
            reply_markup=inline.get_inl_kb_after_create()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ after_create
        await FSM.after_create.set()

    except Exception as e:
        print(f"An error occurred in def get_photo: {str(e)}")


async def start_train(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /train. –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º shared / personal

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ decision_what_train
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.choose_what_train,
            reply_markup=inline.get_inl_kb_decision_what_train()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ decision_what_train
        await FSM.decision_what_train.set()
    except Exception as e:
        print(f"An error occurred in start_train: {str(e)}")


async def answer(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /answer.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MemoryStorage –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        data = await state.get_data()
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.answer.format(data['item_in_progres'][1]),
            parse_mode='HTML',
            reply_markup=reply.get_kb_next()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ next_word
        await FSM.next_word.set()
    except Exception as e:
        print(f"An error occurred in def answer: {str(e)}")


async def next_word(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /next. –í—ã–≤–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MemoryStorage –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        async with state.proxy() as data:
            if not data['items_not_used']:
                data['items_not_used'], data['items_were_used'] = data['items_were_used'], data['items_not_used']
                item, data = filter_data(data)
            else:
                item, data = filter_data(data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=emojize(string=random_next_emoji())
        )
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.question.format(item[0]),
            parse_mode='HTML',
            reply_markup=reply.get_kb_answer()
        )

        # –ï—Å–ª–∏ —É —Å–ª–æ–≤–∞ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if data['item_in_progres'][2] != '0':
            await send_photo(message=message, data=data)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ answer
        await FSM.answer.set()
    except Exception as e:
        print(f"An error occurred in def next_word: {str(e)}")


async def send_photo(message, data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –∏–∑ Google –î–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        data (dict): –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
        url = data['item_in_progres'][2]
        start_index = url.find('/d/') + 3
        end_index = url.find('/view')
        file_id = url[start_index:end_index]

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        file = GD_con.drive.CreateFile(
            {
                'id': file_id
            }
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ
        file.FetchContent()
        await message.answer_photo(
            photo=file.content
        )
    except Exception as e:
        print(f"An error occurred in def send_photo: {str(e)}")


async def count_words(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /count. –í—ã–≤–æ–¥–∏—Ç –∫–æ–ª-–≤–æ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ personal –∏ shared

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∏ –æ–±—â–∏—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        count_not_shared = get.select_count_words_by_user_not_shared(username=message.from_user.username)
        count_shared = get.select_count_words_by_user_shared(username=message.from_user.username)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –µ–≥–æ —Å–ª–æ–≤
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.statistics.format(
                count_not_shared + count_shared,
                count_not_shared,
                count_shared
            ),
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"An error occurred in def count_words: {str(e)}")


async def after_decision_what_train(message: Message, all_items, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        all_items (list): –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
        state (FSMContext): –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=emojize(string=random_next_emoji())
        )
        item = random_item(data=all_items)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ MemoryStorage –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
        async with state.proxy() as data:
            data['items_not_used'] = [i for i in all_items if i != item]
            data['items_were_used'] = [item]
            data['item_in_progres'] = item

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–æ–≤–æ –∏, –µ—Å–ª–∏ –µ—Å—Ç—å, —Ñ–æ—Ç–æ
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.question.format(item[0]),
            parse_mode='HTML',
            reply_markup=reply.get_kb_answer()
        )
        if data['item_in_progres'][2] != '0':
            await send_photo(message=message, data=data)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ answer
        await FSM.answer.set()
    except Exception as e:
        print(f"An error occurred in def after_decision_what_train: {str(e)}")


async def authors(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /authors. –í—ã–≤–æ–¥–∏—Ç –∞–≤—Ç–æ—Ä–æ–≤ –∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, —á—Ç–æ –æ–Ω–∏ —Å–æ–∑–¥–∞–ª–∏

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ –∏ –∏—Ö —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        authors_lst = get.select_authors_and_words()
        if authors_lst:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–≤ –ø–æ –∞–≤—Ç–æ—Ä–∞–º
            result_dict = {}
            for key, value in authors_lst:
                if key in result_dict:
                    result_dict[key].append(value)
                else:
                    result_dict[key] = [value]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∞—Ö –∏ –∏—Ö —Å–ª–æ–≤–∞—Ö
            result_string = ''
            for key, value in result_dict.items():
                formatted_value = ', '.join([f"'{v}'" for v in value])
                result_string += f"<i><b>{key}:</b></i> [{formatted_value}]\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
            await message.bot.send_message(
                chat_id=message.chat.id,
                text=Texts.authors + result_string,
                parse_mode='HTML'
            )
        else:
            await message.bot.send_message(
                chat_id=message.chat.id,
                text=Texts.no_words_in_shared,
                parse_mode='HTML'
            )
    except Exception as e:
        print(f"An error occurred in def authors: {str(e)}")


async def delete_photo_from_gd(url: str):
    """
    –£–¥–∞–ª—è–µ—Ç —Ñ–æ—Ç–æ –∏–∑ Google –î–∏—Å–∫–∞ –ø–æ –µ–≥–æ URL.

    Args:
        url (str): URL —Ñ–æ—Ç–æ –Ω–∞ Google –î–∏—Å–∫–µ.
    """
    try:
        if url != '0':
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ –∏–∑ URL
                start_index = url.find('/d/') + 3
                end_index = url.find('/view')
                file_id = url[start_index:end_index]

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
                file = GD_con.drive.CreateFile({'id': file_id})
                file.Delete()
                print(f"–§–∞–π–ª —Å ID {file_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    except Exception as e:
        print(f"An error occurred in def delete_photo_from_gd: {str(e)}")


async def delete_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /delete. –£–¥–∞–ª—è–µ–º –ø–æ —Å–ª–æ–≤—É –∏–∑ –±–¥.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.delete
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ delete_input
        await FSM.delete_input.set()
    except Exception as e:
        print(f"An error occurred in def delete_start: {str(e)}")


async def delete_input(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å. + —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Google –î–∏—Å–∫–∞

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–æ–≤–æ –∏ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        input_message = message.text
        delete_result = delete.delete_word_from_main_library(
            username=message.from_user.username,
            word=input_message
        )

        # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, —É–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ Google –î–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        if delete_result:
            await delete_photo_from_gd(url=delete_result[3])
            await message.bot.send_message(
                chat_id=message.chat.id,
                text=Texts.done,
                parse_mode='HTML',
                reply_markup=inline.get_inl_kb_after_delete_word()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ after_delete
            await FSM.after_delete.set()
        else:
            # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑
            await message.bot.send_message(
                chat_id=message.chat.id,
                text=Texts.word_not_found,
                parse_mode='HTML',
                reply_markup=reply.get_kb_back_to_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ delete_input
            await FSM.delete_input.set()
    except Exception as e:
        print(f"An error occurred in def delete_input: {str(e)}")


async def swag(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.swag,
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )

        #–ó–∞–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç—ã –∏–∑ –±–¥ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –Ω–∏—Ö —Å—Ç—Ä–æ–∫—É
        comments = get.select_from_swag_comments()
        if comments:
            result_string = ''
            for item in comments:
                result_string += f"<i><b>{item[0]}:</b></i> {item[1]}\n"

            # –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤—É
            await message.bot.send_message(
                chat_id=message.chat.id,
                text=result_string,
                parse_mode='HTML',
                reply_markup=inline.get_inl_kb_swag()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ after_swag
            await FSM.after_swag.set()
        else:
            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
            await message.bot.send_message(
                chat_id=message.chat.id,
                text=Texts.no_comments,
                parse_mode='HTML',
                reply_markup=inline.get_inl_kb_swag()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ after_swag
            await FSM.after_swag.set()
    except Exception as e:
        print(f"An error occurred in def swag: {str(e)}")


async def leave_comment_in_db(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –±–¥ + –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –≤–≤–æ–¥–µ –Ω–æ–≤–æ–≥–æ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
        insert.insert_into_swag(
            username=message.from_user.username,
            comment=message.text
        )
        # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –≤—Å–µ –≥—É—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Å –ø–æ–º–æ—â—å—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=Texts.done,
            parse_mode='HTML',
            reply_markup=inline.get_inl_kb_after_leave_comment()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ after_swag
        await FSM.after_swag.set()

    except Exception as e:
        print(f"An error occurred in def leave_comment: {str(e)}")

async def callback_inl_kb_after_swag(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é —Ä–µ—à–µ–Ω–∏—è –æ–± –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å inline-–∫–Ω–æ–ø–æ–∫
        callback_data = call.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/create'
        if callback_data == '/comment':
            await call.message.answer(
                text='–ø–∏—à–∏ –∫–æ–º–µ–Ω—Ç',
                parse_mode='HTML',
                reply_markup=reply.get_kb_back_to_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ leave_comment
            await FSM.leave_comment.set()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/main'
        if callback_data == '/main':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await call.message.answer(
                text=Texts.commands,
                parse_mode='HTML',
                reply_markup=reply.get_kb_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ main_menu
            await FSM.main_menu.set()
    except Exception as e:
        print(f"An error occurred in def callback_inl_kb_after_swag: {str(e)}")


async def callback_decision_to_upload_photo(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é —Ä–µ—à–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    try:
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å inline-–∫–Ω–æ–ø–æ–∫
        callback_data = call.data
        if callback_data == '/get_photo':
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ get_photo
            await call.message.answer(
                text=Texts.set_the_photo,
                reply_markup=reply.get_kb_back_to_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ get_photo
            await FSM.get_photo.set()

        elif callback_data == '/no_get_photo':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ç–æ ('0') –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
            async with state.proxy() as data:
                data['url'] = '0'

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å —ç–º–æ–¥–∑–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await call.message.answer(
                text=emojize(string=random_emoji_after_create()),
                reply_markup=ReplyKeyboardRemove()
            )
            await call.message.answer(
                text=Texts.done,
                parse_mode='HTML',
                reply_markup=inline.get_inl_kb_after_create()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ after_create
            await FSM.after_create.set()
    except Exception as e:
        print(f"An error occurred in def callback_decision_to_upload_photo: {str(e)}")


async def callback_inl_kb_after_create(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MemoryStorage
        data = await state.get_data()

        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å inline-–∫–Ω–æ–ø–æ–∫
        callback_data = call.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/create'
        if callback_data == '/create':
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            insert.insert_into_main_library(
                username=call.from_user.username,
                word=data['word'],
                definition=data['desc'],
                url=data['url']
            )
            await call.message.answer(
                text=Texts.set_the_word,
                reply_markup=reply.get_kb_back_to_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ get_word
            await FSM.get_word.set()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/main'
        if callback_data == '/main':
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            insert.insert_into_main_library(
                username=call.from_user.username,
                word=data['word'],
                definition=data['desc'],
                url=data['url']
            )
            await call.message.answer(
                text=Texts.commands,
                parse_mode='HTML',
                reply_markup=reply.get_kb_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ main_menu
            await FSM.main_menu.set()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/shared'
        if callback_data == '/shared':
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ FSM after_shared
            insert.insert_into_main_library(
                username=call.from_user.username,
                word=data['word'],
                definition=data['desc'],
                url=data['url'],
                shared='Yes'
            )
            await call.message.answer(
                text=Texts.after_add_to_shared.format(call.from_user.first_name),
                parse_mode='HTML',
                reply_markup=inline.get_inl_kb_after_shared()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ after_shared
            await FSM.after_shared.set()
    except Exception as e:
        print(f"An error occurred in def callback_inl_kb_after_create: {str(e)}")


async def callback_inl_kb_after_shared(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ shared.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å inline-–∫–Ω–æ–ø–æ–∫
        callback_data = call.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/create'
        if callback_data == '/create':
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            await call.message.answer(
                text=Texts.set_the_word,
                reply_markup=reply.get_kb_back_to_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ get_word
            await FSM.get_word.set()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/main'
        if callback_data == '/main':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await call.message.answer(
                text=Texts.commands,
                parse_mode='HTML',
                reply_markup=reply.get_kb_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ main_menu
            await FSM.main_menu.set()
    except Exception as e:
        print(f"An error occurred in def callback_inl_kb_after_shared: {str(e)}")


async def callback_inl_decision_what_train(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (shared or personal).

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.
    """
    try:
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å inline-–∫–Ω–æ–ø–æ–∫
        callback_data = call.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/shared'
        if callback_data == '/shared':
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ shared —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            all_items = get.select_shared_from_main_library()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            if all_items:
                await call.message.answer(
                    text=Texts.lets_go,
                    parse_mode='HTML'
                )
                await after_decision_what_train(
                    message=call.message,
                    all_items=all_items,
                    state=state
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç shared —Å–ª–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
                await call.message.answer(
                    text=Texts.no_words_in_shared,
                    parse_mode='HTML',
                    reply_markup=inline.get_inl_kb_when_user_dont_have_any_words()
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ no_words
                await FSM.no_words.set()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/personal'
        if callback_data == '/personal':
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ personal —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            all_items = get.select_not_shared_from_main_library(
                username=call.from_user.username
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            if all_items:
                await call.message.answer(
                    text=Texts.lets_go,
                    parse_mode='HTML'
                )
                await after_decision_what_train(
                    message=call.message,
                    all_items=all_items,
                    state=state
                )

            # –ï—Å–ª–∏ –Ω–µ—Ç personal —Å–ª–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
            else:
                await call.message.answer(
                    text=Texts.no_words_in_personal,
                    parse_mode='HTML',
                    reply_markup=inline.get_inl_kb_when_user_dont_have_any_words()
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ no_words
                await FSM.no_words.set()
    except Exception as e:
        print(f"An error occurred in def callback_inl_decision_what_train: {str(e)}")


async def callback_inl_if_no_words(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å inline-–∫–Ω–æ–ø–æ–∫
        callback_data = call.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/create'
        if callback_data == '/create':
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            await call.message.answer(
                text=Texts.set_the_word,
                reply_markup=reply.get_kb_back_to_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ get_word
            await FSM.get_word.set()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/main'
        if callback_data == '/main':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await call.message.answer(
                text=Texts.commands,
                parse_mode='HTML',
                reply_markup=reply.get_kb_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ main_menu
            await FSM.main_menu.set()
    except Exception as e:
        print(f"An error occurred in def callback_inl_if_no_words: {str(e)}")


async def callback_inl_kb_after_delete_word(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å inline-–∫–Ω–æ–ø–æ–∫
        callback_data = call.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/delete'
        if callback_data == '/delete':
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–¥–∞–ª–µ–Ω–∏—é
            await call.message.answer(
                text=Texts.delete,
                reply_markup=reply.get_kb_back_to_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ delete_input
            await FSM.delete_input.set()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '/main'
        if callback_data == '/main':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await call.message.answer(
                text=Texts.commands,
                parse_mode='HTML',
                reply_markup=reply.get_kb_menu()
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ main_menu
            await FSM.main_menu.set()
    except Exception as e:
        print(f"An error occurred in def callback_inl_kb_after_delete_word: {str(e)}")



def register_user_handlers(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        dp (Dispatcher): –û–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    """
    try:
        dp.register_message_handler(callback=back_to_menu, commands=['back_to_menu'], state='*')
        dp.register_message_handler(callback=start, commands=['start'])
        dp.register_message_handler(callback=help_me_someone, commands=['help'])
        dp.register_message_handler(callback=menu, commands=['menu'], state=FSM.main_menu)
        dp.register_message_handler(callback=create_card, commands=['create'], state=FSM.main_menu)
        dp.register_message_handler(callback=get_photo, content_types=['photo'], state=FSM.get_photo)
        dp.register_message_handler(callback=get_desc, state=FSM.get_desc)
        dp.register_message_handler(callback=get_word, state=FSM.get_word)
        dp.register_message_handler(callback=start_train, commands=['train'], state=FSM.main_menu)
        dp.register_message_handler(callback=answer, commands=['answer'], state=FSM.answer)
        dp.register_message_handler(callback=next_word, commands=['next'], state=FSM.next_word)
        dp.register_message_handler(callback=count_words, commands=['count'], state=FSM.main_menu)
        dp.register_message_handler(callback=authors, commands=['authors'], state=FSM.main_menu)
        dp.register_message_handler(callback=delete_start, commands=['delete'], state=FSM.main_menu)
        dp.register_message_handler(callback=delete_input, state=FSM.delete_input)
        dp.register_message_handler(callback=swag, commands=['swag'], state=FSM.main_menu)
        dp.register_message_handler(callback=leave_comment_in_db, state=FSM.leave_comment)
    except Exception as e:
        print(f"An error occurred in def register_user_handlers: {str(e)}")


def register_user_callback_query_handlers(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        dp (Dispatcher): –û–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    """
    try:
        dp.register_callback_query_handler(
            callback_inl_kb_after_create, lambda call: True, state=FSM.after_create
        )
        dp.register_callback_query_handler(
            callback_inl_kb_after_shared, lambda call: True, state=FSM.after_shared
        )
        dp.register_callback_query_handler(
            callback_decision_to_upload_photo, lambda call: True, state=FSM.decision_to_upload_photo
        )
        dp.register_callback_query_handler(
            callback_inl_decision_what_train, lambda call: True, state=FSM.decision_what_train
        )
        dp.register_callback_query_handler(
            callback_inl_if_no_words, lambda call: True, state=FSM.no_words
        )
        dp.register_callback_query_handler(
            callback_inl_kb_after_delete_word, lambda call: True, state=FSM.after_delete
        )
        dp.register_callback_query_handler(
            callback_inl_kb_after_swag, lambda call: True, state=FSM.after_swag
        )
    except Exception as e:
        print(f"An error occurred in def register_user_callback_query_handlers: {str(e)}")
